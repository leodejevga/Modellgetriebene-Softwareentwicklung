/*
 * generated by Xtext 2.12.0
 */
package mdd.uni.petrinet.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mdd.uni.petrinet.petrinet.PTArc;
import mdd.uni.petrinet.petrinet.Petrinet;
import mdd.uni.petrinet.petrinet.PetrinetPackage;
import mdd.uni.petrinet.petrinet.Place;
import mdd.uni.petrinet.petrinet.TPArc;
import mdd.uni.petrinet.petrinet.Token;
import mdd.uni.petrinet.petrinet.Transition;
import mdd.uni.petrinet.services.PetrinetGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PetrinetSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PetrinetGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PetrinetPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PetrinetPackage.PT_ARC:
				sequence_PTArc(context, (PTArc) semanticObject); 
				return; 
			case PetrinetPackage.PETRINET:
				sequence_Petrinet(context, (Petrinet) semanticObject); 
				return; 
			case PetrinetPackage.PLACE:
				sequence_Place(context, (Place) semanticObject); 
				return; 
			case PetrinetPackage.TP_ARC:
				sequence_TPArc(context, (TPArc) semanticObject); 
				return; 
			case PetrinetPackage.TOKEN:
				sequence_Token(context, (Token) semanticObject); 
				return; 
			case PetrinetPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Arc returns PTArc
	 *     PTArc returns PTArc
	 *
	 * Constraint:
	 *     (name=ID weight=INT source=[Place|ID] target=[Transition|ID])
	 */
	protected void sequence_PTArc(ISerializationContext context, PTArc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PetrinetPackage.Literals.ARC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetrinetPackage.Literals.ARC__NAME));
			if (transientValues.isValueTransient(semanticObject, PetrinetPackage.Literals.ARC__WEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetrinetPackage.Literals.ARC__WEIGHT));
			if (transientValues.isValueTransient(semanticObject, PetrinetPackage.Literals.PT_ARC__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetrinetPackage.Literals.PT_ARC__SOURCE));
			if (transientValues.isValueTransient(semanticObject, PetrinetPackage.Literals.PT_ARC__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetrinetPackage.Literals.PT_ARC__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPTArcAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPTArcAccess().getWeightINTTerminalRuleCall_3_0(), semanticObject.getWeight());
		feeder.accept(grammarAccess.getPTArcAccess().getSourcePlaceIDTerminalRuleCall_5_0_1(), semanticObject.eGet(PetrinetPackage.Literals.PT_ARC__SOURCE, false));
		feeder.accept(grammarAccess.getPTArcAccess().getTargetTransitionIDTerminalRuleCall_7_0_1(), semanticObject.eGet(PetrinetPackage.Literals.PT_ARC__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Petrinet returns Petrinet
	 *
	 * Constraint:
	 *     (name=ID (places+=Place | transitions+=Transition | arcs+=Arc)*)
	 */
	protected void sequence_Petrinet(ISerializationContext context, Petrinet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Place returns Place
	 *
	 * Constraint:
	 *     (name=ID (tokens+=Token | out+=[PTArc|ID] | in+=[TPArc|ID])*)
	 */
	protected void sequence_Place(ISerializationContext context, Place semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Arc returns TPArc
	 *     TPArc returns TPArc
	 *
	 * Constraint:
	 *     (name=ID weight=INT source=[Transition|ID] target=[Place|ID])
	 */
	protected void sequence_TPArc(ISerializationContext context, TPArc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PetrinetPackage.Literals.ARC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetrinetPackage.Literals.ARC__NAME));
			if (transientValues.isValueTransient(semanticObject, PetrinetPackage.Literals.ARC__WEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetrinetPackage.Literals.ARC__WEIGHT));
			if (transientValues.isValueTransient(semanticObject, PetrinetPackage.Literals.TP_ARC__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetrinetPackage.Literals.TP_ARC__SOURCE));
			if (transientValues.isValueTransient(semanticObject, PetrinetPackage.Literals.TP_ARC__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetrinetPackage.Literals.TP_ARC__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTPArcAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTPArcAccess().getWeightINTTerminalRuleCall_3_0(), semanticObject.getWeight());
		feeder.accept(grammarAccess.getTPArcAccess().getSourceTransitionIDTerminalRuleCall_5_0_1(), semanticObject.eGet(PetrinetPackage.Literals.TP_ARC__SOURCE, false));
		feeder.accept(grammarAccess.getTPArcAccess().getTargetPlaceIDTerminalRuleCall_7_0_1(), semanticObject.eGet(PetrinetPackage.Literals.TP_ARC__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Token returns Token
	 *
	 * Constraint:
	 *     {Token}
	 */
	protected void sequence_Token(ISerializationContext context, Token semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (name=ID (out+=[TPArc|ID] | in+=[PTArc|ID])*)
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
