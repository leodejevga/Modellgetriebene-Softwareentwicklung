/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PetriNetzGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PetrinetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PetriNetz.Petrinet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPetrinetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPlacesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPlacesPlaceParserRuleCall_3_0 = (RuleCall)cPlacesAssignment_3.eContents().get(0);
		private final Assignment cTransitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_0 = (RuleCall)cTransitionsAssignment_4.eContents().get(0);
		private final Assignment cArcsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArcsArcParserRuleCall_5_0 = (RuleCall)cArcsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Petrinet:
		//	'petrinet' name=ID '{'
		//	places+=Place*
		//	transitions+=Transition*
		//	arcs+=Arc*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'petrinet' name=ID '{' places+=Place* transitions+=Transition* arcs+=Arc* '}'
		public Group getGroup() { return cGroup; }
		
		//'petrinet'
		public Keyword getPetrinetKeyword_0() { return cPetrinetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//places+=Place*
		public Assignment getPlacesAssignment_3() { return cPlacesAssignment_3; }
		
		//Place
		public RuleCall getPlacesPlaceParserRuleCall_3_0() { return cPlacesPlaceParserRuleCall_3_0; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_4() { return cTransitionsAssignment_4; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_0() { return cTransitionsTransitionParserRuleCall_4_0; }
		
		//arcs+=Arc*
		public Assignment getArcsAssignment_5() { return cArcsAssignment_5; }
		
		//Arc
		public RuleCall getArcsArcParserRuleCall_5_0() { return cArcsArcParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PlaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PetriNetz.Place");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTokensAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTokensTokenParserRuleCall_3_0_0 = (RuleCall)cTokensAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTokensAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTokensTokenParserRuleCall_3_1_1_0 = (RuleCall)cTokensAssignment_3_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOutAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOutPTArcParserRuleCall_5_2_0 = (RuleCall)cOutAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cOutAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cOutPTArcParserRuleCall_5_3_1_0 = (RuleCall)cOutAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cInKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cColonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cInAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cInTPArcParserRuleCall_6_2_0 = (RuleCall)cInAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cInAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cInTPArcParserRuleCall_6_3_1_0 = (RuleCall)cInAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Place:
		//	'place' name=ID ':' (tokens+=Token (',' tokens+=Token)*)? '{' ('out' ':'
		//	out+=PTArc (',' out+=PTArc)*)? ('in' ':'
		//	in+=TPArc (',' in+=TPArc)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'place' name=ID ':' (tokens+=Token (',' tokens+=Token)*)? '{' ('out' ':' out+=PTArc (',' out+=PTArc)*)? ('in' ':'
		//in+=TPArc (',' in+=TPArc)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'place'
		public Keyword getPlaceKeyword_0() { return cPlaceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//(tokens+=Token (',' tokens+=Token)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//tokens+=Token
		public Assignment getTokensAssignment_3_0() { return cTokensAssignment_3_0; }
		
		//Token
		public RuleCall getTokensTokenParserRuleCall_3_0_0() { return cTokensTokenParserRuleCall_3_0_0; }
		
		//(',' tokens+=Token)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//tokens+=Token
		public Assignment getTokensAssignment_3_1_1() { return cTokensAssignment_3_1_1; }
		
		//Token
		public RuleCall getTokensTokenParserRuleCall_3_1_1_0() { return cTokensTokenParserRuleCall_3_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('out' ':' out+=PTArc (',' out+=PTArc)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'out'
		public Keyword getOutKeyword_5_0() { return cOutKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//out+=PTArc
		public Assignment getOutAssignment_5_2() { return cOutAssignment_5_2; }
		
		//PTArc
		public RuleCall getOutPTArcParserRuleCall_5_2_0() { return cOutPTArcParserRuleCall_5_2_0; }
		
		//(',' out+=PTArc)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//out+=PTArc
		public Assignment getOutAssignment_5_3_1() { return cOutAssignment_5_3_1; }
		
		//PTArc
		public RuleCall getOutPTArcParserRuleCall_5_3_1_0() { return cOutPTArcParserRuleCall_5_3_1_0; }
		
		//('in' ':' in+=TPArc (',' in+=TPArc)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'in'
		public Keyword getInKeyword_6_0() { return cInKeyword_6_0; }
		
		//':'
		public Keyword getColonKeyword_6_1() { return cColonKeyword_6_1; }
		
		//in+=TPArc
		public Assignment getInAssignment_6_2() { return cInAssignment_6_2; }
		
		//TPArc
		public RuleCall getInTPArcParserRuleCall_6_2_0() { return cInTPArcParserRuleCall_6_2_0; }
		
		//(',' in+=TPArc)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//','
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//in+=TPArc
		public Assignment getInAssignment_6_3_1() { return cInAssignment_6_3_1; }
		
		//TPArc
		public RuleCall getInTPArcParserRuleCall_6_3_1_0() { return cInTPArcParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PetriNetz.Token");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTokenAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTokenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Token:
		//	{Token}
		//	'token';
		@Override public ParserRule getRule() { return rule; }
		
		//{Token} 'token'
		public Group getGroup() { return cGroup; }
		
		//{Token}
		public Action getTokenAction_0() { return cTokenAction_0; }
		
		//'token'
		public Keyword getTokenKeyword_1() { return cTokenKeyword_1; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PetriNetz.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cInAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cInPTArcParserRuleCall_4_2_0 = (RuleCall)cInAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cInAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cInPTArcParserRuleCall_4_3_1_0 = (RuleCall)cInAssignment_4_3_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOutAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOutTPArcParserRuleCall_5_2_0 = (RuleCall)cOutAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cOutAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cOutTPArcParserRuleCall_5_3_1_0 = (RuleCall)cOutAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Transition:
		//	'transition' name=ID ':' '{' ('in' ':'
		//	in+=PTArc (',' in+=PTArc)*)? ('out' ':'
		//	out+=TPArc (',' out+=TPArc)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' name=ID ':' '{' ('in' ':' in+=PTArc (',' in+=PTArc)*)? ('out' ':' out+=TPArc (',' out+=TPArc)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('in' ':' in+=PTArc (',' in+=PTArc)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'in'
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//in+=PTArc
		public Assignment getInAssignment_4_2() { return cInAssignment_4_2; }
		
		//PTArc
		public RuleCall getInPTArcParserRuleCall_4_2_0() { return cInPTArcParserRuleCall_4_2_0; }
		
		//(',' in+=PTArc)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//','
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//in+=PTArc
		public Assignment getInAssignment_4_3_1() { return cInAssignment_4_3_1; }
		
		//PTArc
		public RuleCall getInPTArcParserRuleCall_4_3_1_0() { return cInPTArcParserRuleCall_4_3_1_0; }
		
		//('out' ':' out+=TPArc (',' out+=TPArc)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'out'
		public Keyword getOutKeyword_5_0() { return cOutKeyword_5_0; }
		
		//':'
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }
		
		//out+=TPArc
		public Assignment getOutAssignment_5_2() { return cOutAssignment_5_2; }
		
		//TPArc
		public RuleCall getOutTPArcParserRuleCall_5_2_0() { return cOutTPArcParserRuleCall_5_2_0; }
		
		//(',' out+=TPArc)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//out+=TPArc
		public Assignment getOutAssignment_5_3_1() { return cOutAssignment_5_3_1; }
		
		//TPArc
		public RuleCall getOutTPArcParserRuleCall_5_3_1_0() { return cOutTPArcParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ArcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PetriNetz.Arc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPTArcParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cTPArcParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cArcKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWeightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWeightINTTerminalRuleCall_2_0 = (RuleCall)cWeightAssignment_2.eContents().get(0);
		
		//Arc:
		//	(PTArc | TPArc)
		//	'arc' weight=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//(PTArc | TPArc) 'arc' weight=INT
		public Group getGroup() { return cGroup; }
		
		//PTArc | TPArc
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//PTArc
		public RuleCall getPTArcParserRuleCall_0_0() { return cPTArcParserRuleCall_0_0; }
		
		//TPArc
		public RuleCall getTPArcParserRuleCall_0_1() { return cTPArcParserRuleCall_0_1; }
		
		//'arc'
		public Keyword getArcKeyword_1() { return cArcKeyword_1; }
		
		//weight=INT
		public Assignment getWeightAssignment_2() { return cWeightAssignment_2; }
		
		//INT
		public RuleCall getWeightINTTerminalRuleCall_2_0() { return cWeightINTTerminalRuleCall_2_0; }
	}
	public class PTArcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PetriNetz.PTArc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSrcAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSrcPlaceCrossReference_1_0 = (CrossReference)cSrcAssignment_1.eContents().get(0);
		private final RuleCall cSrcPlaceIDTerminalRuleCall_1_0_1 = (RuleCall)cSrcPlaceCrossReference_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTrgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTrgTransitionCrossReference_3_0 = (CrossReference)cTrgAssignment_3.eContents().get(0);
		private final RuleCall cTrgTransitionIDTerminalRuleCall_3_0_1 = (RuleCall)cTrgTransitionCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PTArc:
		//	'{'
		//	src=[Place] '>'
		//	trg=[Transition]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' src=[Place] '>' trg=[Transition] '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//src=[Place]
		public Assignment getSrcAssignment_1() { return cSrcAssignment_1; }
		
		//[Place]
		public CrossReference getSrcPlaceCrossReference_1_0() { return cSrcPlaceCrossReference_1_0; }
		
		//ID
		public RuleCall getSrcPlaceIDTerminalRuleCall_1_0_1() { return cSrcPlaceIDTerminalRuleCall_1_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//trg=[Transition]
		public Assignment getTrgAssignment_3() { return cTrgAssignment_3; }
		
		//[Transition]
		public CrossReference getTrgTransitionCrossReference_3_0() { return cTrgTransitionCrossReference_3_0; }
		
		//ID
		public RuleCall getTrgTransitionIDTerminalRuleCall_3_0_1() { return cTrgTransitionIDTerminalRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TPArcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PetriNetz.TPArc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTrgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTrgPlaceCrossReference_1_0 = (CrossReference)cTrgAssignment_1.eContents().get(0);
		private final RuleCall cTrgPlaceIDTerminalRuleCall_1_0_1 = (RuleCall)cTrgPlaceCrossReference_1_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSrcAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSrcTransitionCrossReference_3_0 = (CrossReference)cSrcAssignment_3.eContents().get(0);
		private final RuleCall cSrcTransitionIDTerminalRuleCall_3_0_1 = (RuleCall)cSrcTransitionCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TPArc:
		//	'{'
		//	trg=[Place] '<'
		//	src=[Transition]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' trg=[Place] '<' src=[Transition] '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//trg=[Place]
		public Assignment getTrgAssignment_1() { return cTrgAssignment_1; }
		
		//[Place]
		public CrossReference getTrgPlaceCrossReference_1_0() { return cTrgPlaceCrossReference_1_0; }
		
		//ID
		public RuleCall getTrgPlaceIDTerminalRuleCall_1_0_1() { return cTrgPlaceIDTerminalRuleCall_1_0_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//src=[Transition]
		public Assignment getSrcAssignment_3() { return cSrcAssignment_3; }
		
		//[Transition]
		public CrossReference getSrcTransitionCrossReference_3_0() { return cSrcTransitionCrossReference_3_0; }
		
		//ID
		public RuleCall getSrcTransitionIDTerminalRuleCall_3_0_1() { return cSrcTransitionIDTerminalRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final PetrinetElements pPetrinet;
	private final PlaceElements pPlace;
	private final TokenElements pToken;
	private final TransitionElements pTransition;
	private final ArcElements pArc;
	private final PTArcElements pPTArc;
	private final TPArcElements pTPArc;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PetriNetzGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPetrinet = new PetrinetElements();
		this.pPlace = new PlaceElements();
		this.pToken = new TokenElements();
		this.pTransition = new TransitionElements();
		this.pArc = new ArcElements();
		this.pPTArc = new PTArcElements();
		this.pTPArc = new TPArcElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.PetriNetz".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Petrinet:
	//	'petrinet' name=ID '{'
	//	places+=Place*
	//	transitions+=Transition*
	//	arcs+=Arc*
	//	'}';
	public PetrinetElements getPetrinetAccess() {
		return pPetrinet;
	}
	
	public ParserRule getPetrinetRule() {
		return getPetrinetAccess().getRule();
	}
	
	//Place:
	//	'place' name=ID ':' (tokens+=Token (',' tokens+=Token)*)? '{' ('out' ':'
	//	out+=PTArc (',' out+=PTArc)*)? ('in' ':'
	//	in+=TPArc (',' in+=TPArc)*)?
	//	'}';
	public PlaceElements getPlaceAccess() {
		return pPlace;
	}
	
	public ParserRule getPlaceRule() {
		return getPlaceAccess().getRule();
	}
	
	//Token:
	//	{Token}
	//	'token';
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}
	
	//Transition:
	//	'transition' name=ID ':' '{' ('in' ':'
	//	in+=PTArc (',' in+=PTArc)*)? ('out' ':'
	//	out+=TPArc (',' out+=TPArc)*)?
	//	'}';
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Arc:
	//	(PTArc | TPArc)
	//	'arc' weight=INT;
	public ArcElements getArcAccess() {
		return pArc;
	}
	
	public ParserRule getArcRule() {
		return getArcAccess().getRule();
	}
	
	//PTArc:
	//	'{'
	//	src=[Place] '>'
	//	trg=[Transition]
	//	'}';
	public PTArcElements getPTArcAccess() {
		return pPTArc;
	}
	
	public ParserRule getPTArcRule() {
		return getPTArcAccess().getRule();
	}
	
	//TPArc:
	//	'{'
	//	trg=[Place] '<'
	//	src=[Transition]
	//	'}';
	public TPArcElements getTPArcAccess() {
		return pTPArc;
	}
	
	public ParserRule getTPArcRule() {
		return getTPArcAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
