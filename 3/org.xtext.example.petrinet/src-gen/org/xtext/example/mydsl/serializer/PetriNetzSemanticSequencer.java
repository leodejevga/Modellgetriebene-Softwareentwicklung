/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.petriNetz.PTArc;
import org.xtext.example.mydsl.petriNetz.PetriNetzPackage;
import org.xtext.example.mydsl.petriNetz.Petrinet;
import org.xtext.example.mydsl.petriNetz.Place;
import org.xtext.example.mydsl.petriNetz.TPArc;
import org.xtext.example.mydsl.petriNetz.Token;
import org.xtext.example.mydsl.petriNetz.Transition;
import org.xtext.example.mydsl.services.PetriNetzGrammarAccess;

@SuppressWarnings("all")
public class PetriNetzSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PetriNetzGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PetriNetzPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PetriNetzPackage.PT_ARC:
				if (rule == grammarAccess.getArcRule()) {
					sequence_Arc_PTArc(context, (PTArc) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPTArcRule()) {
					sequence_PTArc(context, (PTArc) semanticObject); 
					return; 
				}
				else break;
			case PetriNetzPackage.PETRINET:
				sequence_Petrinet(context, (Petrinet) semanticObject); 
				return; 
			case PetriNetzPackage.PLACE:
				sequence_Place(context, (Place) semanticObject); 
				return; 
			case PetriNetzPackage.TP_ARC:
				if (rule == grammarAccess.getArcRule()) {
					sequence_Arc_TPArc(context, (TPArc) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTPArcRule()) {
					sequence_TPArc(context, (TPArc) semanticObject); 
					return; 
				}
				else break;
			case PetriNetzPackage.TOKEN:
				sequence_Token(context, (Token) semanticObject); 
				return; 
			case PetriNetzPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Arc returns PTArc
	 *
	 * Constraint:
	 *     (src=[Place|ID] trg=[Transition|ID] weight=INT)
	 */
	protected void sequence_Arc_PTArc(ISerializationContext context, PTArc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PetriNetzPackage.Literals.PT_ARC__SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetriNetzPackage.Literals.PT_ARC__SRC));
			if (transientValues.isValueTransient(semanticObject, PetriNetzPackage.Literals.PT_ARC__TRG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetriNetzPackage.Literals.PT_ARC__TRG));
			if (transientValues.isValueTransient(semanticObject, PetriNetzPackage.Literals.ARC__WEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetriNetzPackage.Literals.ARC__WEIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPTArcAccess().getSrcPlaceIDTerminalRuleCall_1_0_1(), semanticObject.eGet(PetriNetzPackage.Literals.PT_ARC__SRC, false));
		feeder.accept(grammarAccess.getPTArcAccess().getTrgTransitionIDTerminalRuleCall_3_0_1(), semanticObject.eGet(PetriNetzPackage.Literals.PT_ARC__TRG, false));
		feeder.accept(grammarAccess.getArcAccess().getWeightINTTerminalRuleCall_2_0(), semanticObject.getWeight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Arc returns TPArc
	 *
	 * Constraint:
	 *     (trg=[Place|ID] src=[Transition|ID] weight=INT)
	 */
	protected void sequence_Arc_TPArc(ISerializationContext context, TPArc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PetriNetzPackage.Literals.TP_ARC__TRG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetriNetzPackage.Literals.TP_ARC__TRG));
			if (transientValues.isValueTransient(semanticObject, PetriNetzPackage.Literals.TP_ARC__SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetriNetzPackage.Literals.TP_ARC__SRC));
			if (transientValues.isValueTransient(semanticObject, PetriNetzPackage.Literals.ARC__WEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetriNetzPackage.Literals.ARC__WEIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTPArcAccess().getTrgPlaceIDTerminalRuleCall_1_0_1(), semanticObject.eGet(PetriNetzPackage.Literals.TP_ARC__TRG, false));
		feeder.accept(grammarAccess.getTPArcAccess().getSrcTransitionIDTerminalRuleCall_3_0_1(), semanticObject.eGet(PetriNetzPackage.Literals.TP_ARC__SRC, false));
		feeder.accept(grammarAccess.getArcAccess().getWeightINTTerminalRuleCall_2_0(), semanticObject.getWeight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PTArc returns PTArc
	 *
	 * Constraint:
	 *     (src=[Place|ID] trg=[Transition|ID])
	 */
	protected void sequence_PTArc(ISerializationContext context, PTArc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PetriNetzPackage.Literals.PT_ARC__SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetriNetzPackage.Literals.PT_ARC__SRC));
			if (transientValues.isValueTransient(semanticObject, PetriNetzPackage.Literals.PT_ARC__TRG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetriNetzPackage.Literals.PT_ARC__TRG));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPTArcAccess().getSrcPlaceIDTerminalRuleCall_1_0_1(), semanticObject.eGet(PetriNetzPackage.Literals.PT_ARC__SRC, false));
		feeder.accept(grammarAccess.getPTArcAccess().getTrgTransitionIDTerminalRuleCall_3_0_1(), semanticObject.eGet(PetriNetzPackage.Literals.PT_ARC__TRG, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Petrinet returns Petrinet
	 *
	 * Constraint:
	 *     (name=ID places+=Place* transitions+=Transition* arcs+=Arc*)
	 */
	protected void sequence_Petrinet(ISerializationContext context, Petrinet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Place returns Place
	 *
	 * Constraint:
	 *     (name=ID (tokens+=Token tokens+=Token*)? (out+=PTArc out+=PTArc*)? (in+=TPArc in+=TPArc*)?)
	 */
	protected void sequence_Place(ISerializationContext context, Place semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TPArc returns TPArc
	 *
	 * Constraint:
	 *     (trg=[Place|ID] src=[Transition|ID])
	 */
	protected void sequence_TPArc(ISerializationContext context, TPArc semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PetriNetzPackage.Literals.TP_ARC__TRG) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetriNetzPackage.Literals.TP_ARC__TRG));
			if (transientValues.isValueTransient(semanticObject, PetriNetzPackage.Literals.TP_ARC__SRC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetriNetzPackage.Literals.TP_ARC__SRC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTPArcAccess().getTrgPlaceIDTerminalRuleCall_1_0_1(), semanticObject.eGet(PetriNetzPackage.Literals.TP_ARC__TRG, false));
		feeder.accept(grammarAccess.getTPArcAccess().getSrcTransitionIDTerminalRuleCall_3_0_1(), semanticObject.eGet(PetriNetzPackage.Literals.TP_ARC__SRC, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Token returns Token
	 *
	 * Constraint:
	 *     {Token}
	 */
	protected void sequence_Token(ISerializationContext context, Token semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (name=ID (in+=PTArc in+=PTArc*)? (out+=TPArc out+=TPArc*)?)
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
