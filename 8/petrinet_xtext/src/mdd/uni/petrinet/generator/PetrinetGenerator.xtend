/*
 * generated by Xtext 2.12.0
 */
package mdd.uni.petrinet.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import mdd.uni.petrinet.petrinet.Petrinet
import mdd.uni.petrinet.petrinet.Transition
import mdd.uni.petrinet.petrinet.Place

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PetrinetGenerator extends AbstractGenerator {

	boolean isEnabled = true // Ich habe es nicht hingekriegt isEnabled extension Methode aufzurufen...

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(typeof(Petrinet))) {
			fsa.generateFile(e.name + ".dot", e.compile);
		}
	}

	def compile(Petrinet it) '''
		digraph «name» {
		«FOR p : places»
			«tab»«p.compile»
		«ENDFOR»
		«FOR t : transitions»
			«tab»«t.compile»
		«ENDFOR»
		
		«FOR t : transitions»
			«FOR i : t.in»
				«tab»PLACE_«i.source.name» -> TRANSITION_«t.name» [label=«i.weight»]
			«ENDFOR»
			«FOR o : t.out»
				«tab»TRANSITION_«t.name» -> PLACE_«o.target.name» [label=«o.weight»]
			«ENDFOR»
		«ENDFOR»
		}
	'''

	def compile(
		Transition it) '''TRANSITION_«name» [style="rounded, filled", shape=diamond, fillcolor=«color», label = «name»]'''

	def compile(Place it) '''PLACE_«name» [style="rounded, filled", fillcolor=aliceblue, label = "«name» | «tokens.size»"]'''

	def tab() '''	'''

	def color(Transition it) '''«IF isEnabled»green«ELSE»red«ENDIF»'''
}
