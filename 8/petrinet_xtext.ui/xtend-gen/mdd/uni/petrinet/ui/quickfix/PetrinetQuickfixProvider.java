/**
 * generated by Xtext 2.12.0
 */
package mdd.uni.petrinet.ui.quickfix;

import com.google.common.base.Objects;
import java.util.List;
import mdd.uni.petrinet.petrinet.Arc;
import mdd.uni.petrinet.petrinet.PTArc;
import mdd.uni.petrinet.petrinet.Petrinet;
import mdd.uni.petrinet.petrinet.PetrinetFactory;
import mdd.uni.petrinet.petrinet.Place;
import mdd.uni.petrinet.petrinet.TPArc;
import mdd.uni.petrinet.petrinet.Transition;
import mdd.uni.petrinet.validation.PetrinetValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
@SuppressWarnings("all")
public class PetrinetQuickfixProvider extends DefaultQuickfixProvider {
  private List<Arc> duplicates = CollectionLiterals.<Arc>emptyList();
  
  @Fix(PetrinetValidator.TRANS_MISSING_IN)
  public void addInArc(final Issue issue, final IssueResolutionAcceptor acceptor) {
    String _get = issue.getData()[0];
    String _plus = ("Add incoming PTArc to transition " + _get);
    acceptor.accept(issue, "Add incoming arc", _plus, ".", 
      new ISemanticModification() {
        @Override
        public void apply(final EObject element, final IModificationContext context) throws Exception {
          EObject _eContainer = element.eContainer();
          final EList<Place> places = ((Petrinet) _eContainer).getPlaces();
          EObject _eContainer_1 = element.eContainer();
          final EList<Arc> arcs = ((Petrinet) _eContainer_1).getArcs();
          final PTArc ptarc = PetrinetFactory.eINSTANCE.createPTArc();
          ptarc.setName("newArc");
          int suffix = 1;
          while (IterableExtensions.<Arc>exists(arcs, ((Function1<Arc, Boolean>) (Arc a) -> {
            return Boolean.valueOf(a.getName().equals(ptarc.getName()));
          }))) {
            {
              String _name = ptarc.getName();
              String _plus = (_name + Integer.valueOf(suffix));
              ptarc.setName(_plus);
              suffix++;
            }
          }
          ptarc.setWeight(1);
          ptarc.setSource(places.get(0));
          ptarc.getSource().getOut().add(ptarc);
          ptarc.setTarget(((Transition) element));
          arcs.add(ptarc);
          ((Transition) element).getIn().add(ptarc);
        }
      });
  }
  
  @Fix(PetrinetValidator.TRANS_MISSING_OUT)
  public void addOutArc(final Issue issue, final IssueResolutionAcceptor acceptor) {
    String _get = issue.getData()[0];
    String _plus = ("Add outgoing PTArc to transition " + _get);
    acceptor.accept(issue, "Add outgoing arc", _plus, ".", 
      new ISemanticModification() {
        @Override
        public void apply(final EObject element, final IModificationContext context) throws Exception {
          EObject _eContainer = element.eContainer();
          final EList<Place> places = ((Petrinet) _eContainer).getPlaces();
          EObject _eContainer_1 = element.eContainer();
          final EList<Arc> arcs = ((Petrinet) _eContainer_1).getArcs();
          final TPArc tparc = PetrinetFactory.eINSTANCE.createTPArc();
          tparc.setName("newArc");
          int suffix = 1;
          while (IterableExtensions.<Arc>exists(arcs, ((Function1<Arc, Boolean>) (Arc a) -> {
            return Boolean.valueOf(a.getName().equals(tparc.getName()));
          }))) {
            {
              String _name = tparc.getName();
              String _plus = (_name + Integer.valueOf(suffix));
              tparc.setName(_plus);
              suffix++;
            }
          }
          tparc.setWeight(1);
          tparc.setSource(((Transition) element));
          tparc.setTarget(places.get(0));
          tparc.getTarget().getIn().add(tparc);
          arcs.add(tparc);
          ((Transition) element).getOut().add(tparc);
        }
      });
  }
  
  @Fix(PetrinetValidator.DUPLICATE_EDGES)
  public void deleteDuplicates(final Issue issue, final IssueResolutionAcceptor acceptor) {
    String _get = issue.getData()[0];
    String _plus = ("Remove all edges which are duplicates of " + _get);
    acceptor.accept(issue, "Remove duplicate edges", _plus, ".", 
      new ISemanticModification() {
        @Override
        public void apply(final EObject element, final IModificationContext context) throws Exception {
          EObject _eContainer = element.eContainer();
          final Petrinet petrinet = ((Petrinet) _eContainer);
          if ((element instanceof PTArc)) {
            final PTArc ptarc = ((PTArc) element);
            if (((ptarc.getSource() != null) && (ptarc.getTarget() != null))) {
              final Function1<Arc, Boolean> _function = (Arc a) -> {
                return Boolean.valueOf(((((a != ptarc) && (a instanceof PTArc)) && Objects.equal(((PTArc) a).getSource(), ptarc.getSource())) && Objects.equal(((PTArc) a).getTarget(), ptarc.getTarget())));
              };
              PetrinetQuickfixProvider.this.duplicates = IterableExtensions.<Arc>toList(IterableExtensions.<Arc>filter(petrinet.getArcs(), _function));
            }
            ptarc.getSource().getOut().removeAll(PetrinetQuickfixProvider.this.duplicates);
            ptarc.getTarget().getIn().removeAll(PetrinetQuickfixProvider.this.duplicates);
          }
          if ((element instanceof TPArc)) {
            final TPArc tparc = ((TPArc) element);
            if (((tparc.getSource() != null) && (tparc.getTarget() != null))) {
              final Function1<Arc, Boolean> _function_1 = (Arc a) -> {
                return Boolean.valueOf(((((a != tparc) && (a instanceof TPArc)) && Objects.equal(((TPArc) a).getSource(), tparc.getSource())) && Objects.equal(((TPArc) a).getTarget(), tparc.getTarget())));
              };
              PetrinetQuickfixProvider.this.duplicates = IterableExtensions.<Arc>toList(IterableExtensions.<Arc>filter(petrinet.getArcs(), _function_1));
            }
            tparc.getSource().getOut().removeAll(PetrinetQuickfixProvider.this.duplicates);
            tparc.getTarget().getIn().removeAll(PetrinetQuickfixProvider.this.duplicates);
          }
          petrinet.getArcs().removeAll(PetrinetQuickfixProvider.this.duplicates);
        }
      });
  }
  
  @Fix(PetrinetValidator.ARC_REFERENCE_MISSING)
  public void addReferences(final Issue issue, final IssueResolutionAcceptor acceptor) {
    String _get = issue.getData()[0];
    String _plus = ("Add necessary references to " + _get);
    acceptor.accept(issue, "Add references", _plus, ".", 
      new ISemanticModification() {
        @Override
        public void apply(final EObject element, final IModificationContext context) throws Exception {
          if ((element instanceof PTArc)) {
            final PTArc ptarc = ((PTArc) element);
            boolean _contains = ptarc.getSource().getOut().contains(ptarc);
            boolean _not = (!_contains);
            if (_not) {
              ptarc.getSource().getOut().add(ptarc);
            }
            boolean _contains_1 = ptarc.getTarget().getIn().contains(ptarc);
            boolean _not_1 = (!_contains_1);
            if (_not_1) {
              ptarc.getTarget().getIn().add(ptarc);
            }
          }
          if ((element instanceof TPArc)) {
            final TPArc tparc = ((TPArc) element);
            boolean _contains_2 = tparc.getSource().getOut().contains(tparc);
            boolean _not_2 = (!_contains_2);
            if (_not_2) {
              tparc.getSource().getOut().add(tparc);
            }
            boolean _contains_3 = tparc.getTarget().getIn().contains(tparc);
            boolean _not_3 = (!_contains_3);
            if (_not_3) {
              tparc.getTarget().getIn().add(tparc);
            }
          }
        }
      });
  }
}
